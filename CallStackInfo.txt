-------🗒🗒🗒🗒🗒

¿Qué es una CallStack?
	Es una pila de ejecución y esta hace que en javascript solo se puedan ejecutar cosas de por una a la vez.
	En donde los procesos en ejecución se van apilando uno encima del otro, la pila se define como Last in First Out, esto quiere decir que el ultima en entrar es el primero en salir, para dar un ejemplo más real o cotidiano es como se haría normalmente con una pila de platos donde al colocarlos unos encima del otro el ultimo plato será el primero en ser lavado y saldrá de la pila 
	Los motores de JavaScript funcionan como la pila de platos, el motor de JavaScript en primera instancia pasa por todo el código donde lo primero que hace es leer nuestro código y por cada llamado a una función va a crear un registro de todas las funciones existentes y lo va a agregar a la pila, el registro contiene la información necesaria para  que el motor pueda ejecutar esta función para el llamado de otra función hace lo mismo crea otro registro con la información de la nueva función y la agrega a la pila y con ello el registro que queda hasta arriba de la pila coincidirá con la. Función que motor está ejecutando.
Nota
	No puede trabajar con varias funciones, cuando el motor termine con el registro de hasta arriba de la pila que estaba ejecutando, lo sacara de la pila y seguirá con el registro que quedo debajo y la función que este tenga asociada.


🗒🗒🗒🗒🗒-------


GB

What is a CallStack?
It is an execution stack and this means that in javascript you can only execute things one at a time.
Where the running processes are stacked one on top of the other, the stack is defined as Last in First Out, this means that the last one to enter is the first to leave, to give a more real or everyday example, this is how it would be done normally with a stack of dishes where when placed one on top of the other the last dish will be the first to be washed and will come out of the stack
JavaScript engines work like the stack of dishes, the JavaScript engine in the first instance goes through all the code where the first thing it does is read our code and for each function call it will create a record of all existing functions and it is going to add it to the stack, the register contains the necessary information so that the engine can execute this function for the call of another function it does the same it creates another register with the information of the new function and adds it to the stack and with it the record at the top of the stack will match the . Function that motor is executing.
Note
It cannot work with several functions, when the engine finishes with the record at the top of the stack that it was executing, it will remove it from the stack and continue with the record that is below it and the function that is associated with it.